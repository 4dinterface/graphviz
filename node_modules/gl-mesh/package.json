{
  "name": "gl-mesh",
  "version": "0.1.0",
  "description": "Static indexed mesh drawing for WebGL",
  "main": "index.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "gl-vao": "~0.0.1",
    "ndarray-ops": "~1.1.0",
    "typedarray-pool": "~0.1.1",
    "webglew": "~0.0.0",
    "ndarray": "~1.0.0",
    "gl-buffer": "~0.1.0"
  },
  "devDependencies": {
    "gl-now": "~0.0.0",
    "simple-2d-shader": "~0.0.0"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/gl-mesh.git"
  },
  "keywords": [
    "webgl",
    "mesh",
    "static",
    "indexed",
    "triangle",
    "point",
    "line",
    "wrapper",
    "gl",
    "drawing",
    "cell",
    "complex",
    "simplicial",
    "complex"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "529cb8e9b5634304847a3e0f810db777c1235986",
  "bugs": {
    "url": "https://github.com/mikolalysenko/gl-mesh/issues"
  },
  "readme": "gl-mesh\n=======\nWebGL class for rendering static indexed geometry\n\n# Example\n\n[Try this demo in your browser](http://mikolalysenko.github.io/gl-mesh/)\n\n```javascript\nvar shell = require(\"gl-now\")()\nvar createMesh = require(\"gl-mesh\")\nvar simple2DShader = require(\"simple-2d-shader\")\n\nvar mesh, shader\n\nshell.on(\"gl-init\", function() {\n  shader = simple2DShader(shell.gl)\n  mesh = createMesh(shell.gl,\n      [[0, 1, 2],\n       [2, 1, 3]],\n      { \"position\": [[-1,-1],   [0, 1],    [0, 0],    [1, -1]],\n        \"color\":    [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]] })\n})\n\nshell.on(\"gl-render\", function(t) {\n  shader.bind()\n  mesh.bind(shader)\n  mesh.draw()\n  mesh.unbind()\n})\n```\n\nAnd here is what it should look like:\n\n<img src=https://raw.github.com/mikolalysenko/gl-mesh/master/images/screenshot.png>\n\n# Install\n\nUse [npm](https://npmjs.org/) to install it locally:\n\n    npm install gl-mesh\n    \nThen you can build/run the client using any tool that compiles CommonJS modules, for example [browserify](https://github.com/substack/node-browserify) or [beefy](https://github.com/chrisdickinson/beefy).\n\n# API\n\n```javascript\nvar createMesh = require(\"gl-mesh\")\n```\n\n## Constructor\n\n### `var mesh = createMesh(gl, cells, attributes)`\nCreates a static mesh.\n\n* `gl` is a webgl context\n* `cells` is a list of representing indices into the geometry\n* `attributes` is an object of attributes to pass to the mesh\n\nEach of these objects can be encoded as either an array-of-native-arrays or as a typed array using [ndarrays](https://github.com/mikolalysenko/ndarray).  The first dimension in the shape is interepreted as the number of vertices in the attribute while the second dimension is interpreted as the size.  For example, to pass in a packed array of 3d vertices in a typed array you could do:\n\n```javascript\nvar mesh = createMesh(gl, cells, { \"positions\": ndarray(position_data, [numVertices, 3]) })\n```\n\nThe drawing mode for the mesh is determined by the shape of the cells according to the following rule:\n\n* `cells.length == 0` : empty mesh\n* `cells[0].length == 1` : `gl.POINTS`\n* `cells[0].length == 2` : `gl.LINES`\n* `cells[0].length == 3` : `gl.TRIANGLES`\n\nYou can also skip the `cells` parameter, in which case the resulting mesh is drawn as a point cloud.\n\n\nAlso you can pass a single object with a `cells` field.  For example, here is the quickest way to create a Stanford bunny test mesh:\n\n```javascript\nvar bunnyMesh = createMesh(gl, require(\"bunny\"))\n```\n\nWhere the module comes from the [`bunny`](https://npmjs.org/package/bunny) package\n\n**Returns** A `Mesh` object\n\n## Methods\nEach `Mesh` object has the following methods:\n\n### `mesh.bind(shader)`\nBinds the mesh to the given shader updating attributes accordingly.\n\n* `shader` is an instance of a shader created using [`gl-shader`](https://github.com/mikolalysenko/gl-shader)\n\n### `mesh.draw()`\nDraws an instance of the mesh once it is bound to a shader\n\n### `mesh.unbind()`\nUnbinds the mesh releasing the current vertex attribute state\n\n### `mesh.dispose()`\nDestroys the mesh and releases all of its associated resources\n\n# Credits\n(c) 2013 Mikola Lysenko. MIT License",
  "_id": "gl-mesh@0.1.0",
  "dist": {
    "shasum": "e42a81e61bb7dff6b941465db7c966cfa6a62536",
    "tarball": "http://registry.npmjs.org/gl-mesh/-/gl-mesh-0.1.0.tgz"
  },
  "_from": "gl-mesh@",
  "_npmVersion": "1.2.24",
  "_npmUser": {
    "name": "mikolalysenko",
    "email": "mikolalysenko@gmail.com"
  },
  "maintainers": [
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    }
  ],
  "_shasum": "e42a81e61bb7dff6b941465db7c966cfa6a62536",
  "_resolved": "https://registry.npmjs.org/gl-mesh/-/gl-mesh-0.1.0.tgz"
}
